{
  "hash": "ae7b0f33d4b80925df70492f3c4e43d4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 11 Prac: Points, polygons, and geometric SDMs in R\"\nauthor: \"Alex Skeels\"\ndate: \"2025-08-04\"\nformat: html\nexecute:\n  eval: false\n  warning: false\n  fig-width: 6    # inches\n  fig-height: 4   # inches\n---\n\n\n\n\n# **Before We Begin**\n\nTo make sure we're all on the same page and have access to the data, do this at the start of the workshop.\n\n1.  Download the GitHub repository by making a clone (https://github.com/alexskeels/\nBIOL8002_SDM_workshop\n)\n\n![](github_screenshot.png){fig-align=\"center\"}\n\n2.  Unzip the folder \"BIOL8002_SDM_workshop-main.zip\"\n\n3.  Open RStudio\n\n4.  Open project file in RStudio \"SDM_practical.RProj\"\n\n# **Introduction**\n\nToday we are going to learn to work with with one of the most commonly used spatial data types in R - observation records. Observation records are point samples where a variable of interest and the geographic coordinates, in latitude and longitude, have been recorded. Observation data in this format could record all kinds of information, from the location of McDonalds restaurants, to the presence of recorded cases of particular CoVID-19 strains, to sightings of organisms in the wild. Today, we will focus on the latter. We will start by taking occurrence records for one of Australia's most iconic vertebrate species - the Frilled Lizard (*Chlamydosaurus kingii*) - from the Atlas of Living Australia (ALA) and identifying common errors or biases in spatial data. We will look at how to clean and subset the data in preparation for modeling the species distribution using a niche model.\n\n![The frilled-necked lizard (Chlamydosaurus kingii): Photo from D. Esquerre](frilled_lizard.jpg){fig-align=\"center\"}\n\n## The Data\n\nThe ALA is a collaborative, digital, open infrastructure that pulls together Australian biodiversity data from multiple sources, making it accessible and reusable. It hosts an enormous amount of open source biodiversity data that can be readily downloaded, and even has it's own R package to help do so ([galah](https://galah.ala.org.au/)). As you need a registered email address to use galah, today we will focus on a dataset I have already downloaded. For reproducibility, every dataset downloaded from ALA is given a Digital Object Identifier (DOI) so anyone can download the exact same one. Here is our one for the [Frilled Lizard](https://doi.org/10.26197/ala.2e4809b8-791f-4adb-b1aa-f3e0fd94f86a), but you can also load this in from the distribution folder.\n\n------------------------------------------------------------------------\n\n# **1**: Loading and visualising the data\n\n### R libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If not installed use the pacman package to both install and load packages\ninstall.packages(\"pacman\")\nlibrary(pacman)\n\n# Use pacman::p_load \npacman::p_load(terra)  # For raster and vector data\npacman::p_load(sf)  # For vector data\npacman::p_load(sp) \npacman::p_load(ggplot2)  # For plotting\npacman::p_load(rnaturalearth) # For polygons\npacman::p_load(dplyr) # For data wrangling\n\n# To make Alpha-Hulls we need to install a package from GitHub as well\nremotes::install_github(\"babichmorrowc/hull2spatial\")\npacman::p_load(hull2spatial)\npacman::p_load(alphahull)  # Required by hull2spatial internally\n```\n:::\n\n\n### Load ALA data\n\nThe distribution data from ALA is ready for you in the \"distribution\" folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in occurence records\nocc <- read.csv(\"distribution/frilled_lizard_ALA.csv\")\n```\n:::\n\n\nInspect the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# take a look at first few rows\nhead(occ)\n\n# You can see there is a lot of meta-data - for example we can see what kinds of observations the records are from\nunique(occ$basisOfRecord)\n\n# how many records do we have?\nnrow(occ)\n```\n:::\n\n\n### Plot ALA records\n\nLets visualise where the records are.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, remove any rows with missing coordinates\nocc <- occ %>%\n  filter(!is.na(decimalLongitude) & !is.na(decimalLatitude))\n\n# Ssing the sf pacakge, turn the records in spatial points \nocc_sf <- st_as_sf(occ, coords = c(\"decimalLongitude\", \"decimalLatitude\"), crs = 4326)\n\n# Bounding box from your occurrence records - this is the extent the records cover\nbbox <- st_bbox(occ_sf)\n\n# Load the world map from rnaturalearth pacakge\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n```\n:::\n\n\n#### Task 1\n\nPlot out the occurence records using the ggplot2 package. Change the colour argument in aes() call in geom_sf() to colour the points by a variable in the 'occ' data. Have a go at plotting by different variables to see if there are any spatial patterns (example below).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot using ggplot2\nggplot() +\n  geom_sf(data = world, fill = \"gray95\", color = \"gray40\") + # this line adds the world map\n  geom_sf(data = occ_sf, aes(colour=basisOfRecord),  alpha = 0.6, size = 1) + # this line adds the occurence records\n  coord_sf( # this section crops the map to the area surrounding the occurence records, ratehr than the whole globe\n    xlim = c(bbox[\"xmin\"]-10, bbox[\"xmax\"]+10), # add 10 degrees on either side \n    ylim = c(bbox[\"ymin\"]-10, bbox[\"ymax\"]+10),\n    expand = FALSE) +\n  theme_minimal() + # this adds the theme elements to make it pretty\n  labs(title = \"Occurrence Records for the Frilled Lizard\", x = \"Longitude\", y = \"Latitude\") # this adds the labels\n```\n:::\n\n\n-   **Question:** What can you notice about the distribution of occurrence records? Anything unusual?\n\n------------------------------------------------------------------------\n\n\n# **2**: Cleaning the data\n\nGiven a spatial dataset, we are often faced with the challenge of determining which points are true observations of wild organisms and which are errors, preserved specimens from museums/herbaria, invasive or non-natural observations (for example ornamental plants in peoples homes are often well outside their native distributions).\n\nLuckily, for many species, we have expert opinion on where the species native distribution is. For most animals, as well as many plants, and increasingly fungi, the International Union for the Conservation of Nature (IUCN) is a leading source of reliable geographic range information for most species. For example, the Frilled Lizard's geographic range and conservation status was assessed by the IUCN in 2014 ([link here](https://www.iucnredlist.org/species/170384/21644690)).\n\n![Frilled Lizard Redlist Assessment](redlist.png){width=\"300\"}\n\nWe can use this range information to help us clean the ALA records, including only those that are within the known distribution of the Frilled Lizard. To do this we can download the spatial polygon of the species range from the IUCN. This is downloaded as a shapefile from the IUCN Redlist website - a format which contains several ancillary files (.cpg, .dbf, .shp, .shx, and .prj).\n\n### Load the IUCN data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the IUCN polygon using the sf package\niucn_sf <- st_read(\"distribution/frilled_lizard.shp\")\n\n\n# plot with our occurence records\nggplot() +\n  geom_sf(data = world, fill = \"gray95\", color = \"gray40\") + # this line adds the world map\n  geom_sf(data = occ_sf, aes(), color = \"#0072B2\", alpha = 0.6, size = 1) + # this line adds the occurence records\n  geom_sf(data = iucn_sf, fill = \"#009E73\", color = \"#007F5F\", alpha = 0.4) +\n  coord_sf( # this section crops the map to the area surrounding the occurence records, ratehr than the whole globe\n    xlim = c(bbox[\"xmin\"]-10, bbox[\"xmax\"]+10), # add 10 degrees on either side \n    ylim = c(bbox[\"ymin\"]-10, bbox[\"ymax\"]+10),\n    expand = FALSE) +\n  theme_minimal() + # this adds the theme elements to make it pretty\n  labs(title = \"Occurrence Records for the Frilled Lizard\", x = \"Longitude\", y = \"Latitude\") # this adds the labels\n```\n:::\n\n\nThis raises an interesting problem. There are clearly some points well outside the species natural range, for example, in Perth, Sydney, New Caledonia, and even one point way off in the middle of the Pacific ocean to the north. But there are other points that could be plausibly part of the species range, for example, the cluster of points around Mt. Isa (140E, 22S). On the other hand, there are clearly parts of the IUCN polygon with no observations within them.\n\n-   **Question:** explain the differences between these two data sources that might lead to different estimates of the species range - mention error, biases, and overestimation versus underestimation of the range.\n\nTo remove the obviously erroneous data, we could simply crop the occurrence points using the IUCN polygon, therefore deferring responsibility to the IUCN expert panel. However, your intuition probably tells you that some of those nearby points are also likely to be true occurrences.\n\nOne solution, then, is to crop the occurrence data using a buffer distance from the IUCN polygon. Lets plot out some buffer distances to see what they look like.\n\n### Buffer IUCN Data\n\nSelecting an appropriate buffer distance to remove potentially erroneous points is a difficult task as there is not necessarily a set of hard-and-fast rules. We want to balance including points that could reasonably be considered part of the species range without including obviously wrong points.\n\n#### Task 2\n\nPlot different buffer sizes and decide which size is most appropriate for the frilled lizard.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# choose buffer distance in meters\nbuffer_distance <- XXX # CHANGE THIS\n\n# create buffer in sf\nbuffer_iucn <- st_buffer(iucn_sf, buffer_distance)\n\n# Buffers + original IUCN range + all occurrence points\nggplot() +\n  geom_sf(data = buffer_iucn, color = \"black\", show.legend = TRUE, alpha=0.2) +\n  geom_sf(data = iucn_sf, fill = \"#009E73\", color = \"#007F5F\", alpha = 0.5) +\n  geom_sf(data = occ_sf, color = \"#D55E00\", alpha = 0.7, size = 1) +\n  scale_fill_viridis_d(name = \"Buffer size\") +\n  coord_sf(expand = FALSE) +\n  theme_minimal() +\n  labs(title = \"IUCN Range with Buffer and Occurrence Points\",\n       x = \"Longitude\", y = \"Latitude\")\n```\n:::\n\n\nTake a look and decide which strategy you'd like to take with cropping the records. you can either take all the records, filter based on IUCN polygon, or filter based on a buffered IUCN polygon.\n\n-   **Question:** Is any distance more justifiable than others? Which buffer size did you select and why?\n\n### Crop Occurrence Records with Buffer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset only the points that fall within the polygon\nocc_cropped <- occ_sf[lengths(st_within(occ_sf, buffer_iucn)) > 0, ]\n\n# create a data frame and we'll save it for use in next week's prac\nocc_cropped_df <- as.data.frame(st_coordinates(occ_cropped))\n\n# write it as a csv\nwrite.csv(occ_cropped_df, file=\"distribution/frilled_lizard_ALA_cropped.csv\", row.names = F)\n\n# crop the polygon by the coastline\nsf_use_s2(FALSE)\nbuffer_iucn <- st_intersection(st_make_valid(buffer_iucn), world)\nsf_use_s2(TRUE)\n\n# Plot polygon and the cropped points\nggplot() +\n  geom_sf(data = buffer_iucn, fill = \"#56B4E9\", color = \"black\", alpha = 0.3) +\n  geom_sf(data = iucn_sf, fill = \"#009E73\", color = \"#007F5F\", alpha = 0.5) +\n  geom_sf(data = occ_cropped, color = \"#D55E00\", size = 1) +\n  coord_sf(expand = FALSE) +\n  theme_minimal() +\n  labs(title = \"Occurrence Points Within Buffered Polygon\",\n       x = \"Longitude\", y = \"Latitude\")\n```\n:::\n\n\nNow we have a roughly cleaned data set of species occurrences from ALA. We are happy that they fall within the likely range of the Frilled Lizard. However, we have noted that both the IUCN polygon and ALA occurrence records each have biases which mean they might over- or under-estimate the species range.\n\n------------------------------------------------------------------------\n\n\n# **3**: Geometric Species Distribution Models\n\nThe final part of this week's prac is estimating an outline of the species range from occurence records. Reconstructions of species ranges are known as species distribution models (SDM) and the most simplistic of these rely only on geometric models from spatial records. We will explore these today and next week we will look at more complex models that attempt to estimate the species environmental niche in order to reconstruct suitable habitat.\n\n### Convex Hulls\n\nConvex hulls, also known as minimum convex polygons (MCP) are one of the most straightforward ways to get an estimate of a species range from occurrence records. A convex hull is an outline of the records that includes only convex internal angles (i.e. \\< 180 degrees).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert sf to data.frame to extract coordinates\ncoords <- st_coordinates(occ_cropped)\nlon <- coords[, \"X\"]\nlat <- coords[, \"Y\"]\n\n# Compute Convex Hull indices\nhull_indices <- chull(lon, lat)\n\n# Ensure it's a closed polygon (repeat first point at the end)\nhull_indices <- c(hull_indices, hull_indices[1])\n\n# Create a matrix of hull coordinates\nhull_coords <- cbind(lon[hull_indices], lat[hull_indices])\n\n# Convert convex hull to an sf POLYGON\nhull_polygon <- st_polygon(list(hull_coords))\nhull_sf <- st_sfc(hull_polygon, crs = 4326)\nhull_sf <- st_sf(geometry = hull_sf)\n\n# crop the convex hull by the coastline\nsf_use_s2(FALSE)\nhull_sf <- st_intersection(st_make_valid(hull_sf), world)\nsf_use_s2(TRUE)\n\n# Plot Convex Hull\nggplot() +\n  geom_sf(data = occ_cropped,  color = \"#DD1C77\", size = 0.8, alpha=0.5) +\n  geom_sf(data = hull_sf, fill = NA, color = \"#08519C\") +\n\n  theme_minimal() +\n  labs(title = \"Convex Hull from Cropped Occurrences\")\n```\n:::\n\n\n### Alpha Hulls\n\nAlpha hulls are slightly more complex models which allow for non-linear, concave links between points. The degree of concavity is determined by the alpha value.\n\n#### Task 3\n\nChoose different alpha values and see how this affects the alpha hull (Hint: values are \\< 10 generally).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha <- XXX # choose alpha value\n\n# Compute Alpha Hull\nxy_df <- data.frame(x = lon, y = lat)\nxy_df <- unique(round(xy_df, 4))\n\nahull_obj <- ahull(xy_df, alpha = alpha)\n```\n:::\n\n\nWe now want to turn the alpha hull object into an object of class \"sf\". This is because the alpha package uses its own class that is not compatible with most other R packages (like ggplot2). To do this we will use the hull2spatial package, but this requires a few steps to first convert the object to class \"sp\" (which is now depreciated) and then to class \"sf\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert alpha hull to sf POLYGON\nahull_spatial <- ahull2poly(ahull_obj)\n\n# Convert each sub-polygon to its own SpatialPolygons object\npoly_list <- lapply(seq_along(sub_polys), function(i) {\n  # Create a SpatialPolygons object with one sub-polygon\n  SpatialPolygons(list(Polygons(list(sub_polys[[i]]), ID = as.character(i))))\n})\n\n# Convert each to sf and combine into one sf object\nsf_list <- lapply(poly_list, st_as_sf)\nahull_sf <- do.call(rbind, sf_list)\n\n# Add an ID column (optional)\nahull_sf$id <- seq_len(nrow(ahull_sf))\n\n\nst_crs(ahull_sf) <- 4326  # Set CRS\n\n# crop the convex hull by the coastline\nsf_use_s2(FALSE)\nahull_sf <- st_intersection(st_make_valid(ahull_sf), world)\nsf_use_s2(TRUE)\n```\n:::\n\n\nNow we have the alpha hull as class sf, we can plot it out!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = occ_cropped,  color = \"#DD1C77\", size = 0.8, alpha=0.5) +\n  geom_sf(data = ahull_sf, fill = NA, color = \"#D94801\") +\n  theme_minimal() +\n  coord_sf(expand = FALSE) +\n  labs(\n    title = \"Frilled Lizard Distributions and Range Envelopes\",\n    subtitle = \"IUCN range, buffer zone, convex and alpha hulls, and occurrence records\",\n    x = \"Longitude\", y = \"Latitude\"\n  ) +\n  theme(\n    #legend.position = \"none\",\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.background = element_rect(fill = \"white\")\n  )\n```\n:::\n\n\nSave the alpha hull as we will use it again in next week's prac\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(ahull_sf, \"distribution/frilled_lizard_alpha_hull.shp\")\n```\n:::\n\n\n-   **Question:** what trade-offs are involved in choosing smaller vs larger alpha values for representing the species' distribution?\n\n### Putting it together\n\nFinally lets just put everything on a single plot to see how the different methods differ!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a new column to each sf object for identifying it in the legend\nahull_sf$layer <- \"Alpha Hull\"\nhull_sf$layer <- \"Convex Hull\"\niucn_sf$layer <- \"IUCN Range\"\nbuffer_iucn$layer <- \"Buffer Zone\"\nocc_cropped$layer <- \"Occurrences\"\n\n# Plot with color mapped to `layer`\nggplot() +\n  geom_sf(data = occ_cropped, aes(color = layer), size = 0.8, alpha = 0.5) +\n  geom_sf(data = ahull_sf, aes(color = layer), fill = NA) +\n  geom_sf(data = buffer_iucn, aes(color = layer), fill = NA) +\n  geom_sf(data = iucn_sf, aes(color = layer), fill = NA) +\n  geom_sf(data = hull_sf, aes(color = layer), fill = NA) +\n  scale_color_manual(\n    name = \"Layer\",\n    values = c(\n      \"Occurrences\" = \"#DD1C77\",\n      \"Alpha Hull\" = \"#D94801\",\n      \"Buffer Zone\" = \"#6BAED6\",\n      \"IUCN Range\" = \"#238B45\",\n      \"Convex Hull\" = \"#08519C\"\n    )\n  ) +\n  theme_minimal() +\n  coord_sf(expand = FALSE) +\n  labs(\n    title = \"Frilled Lizard Distributions and Range Envelopes\",\n    subtitle = \"IUCN range, buffer zone, convex and alpha hulls, and occurrence records\",\n    x = \"Longitude\", y = \"Latitude\"\n  ) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.background = element_rect(fill = \"white\")\n  )\n```\n:::\n\n\n# Fin!\n",
    "supporting": [
      "Week_11_practical_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}